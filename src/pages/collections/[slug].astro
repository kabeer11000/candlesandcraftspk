---
import BaseLayout from '@/layouts/BaseLayout.astro';
import ProductGrid from '@/components/ProductGrid.astro';
import { db } from '@/lib/firebase';
import { collection, getDocs, query, where } from 'firebase/firestore';
import type { Product } from '@/types';

// Define collections data / logic to get slugs (can be refactored)
async function getCollectionDefinitions() {
    let products: Product[] = [];
    try {
        const querySnapshot = await getDocs(collection(db, "products"));
        products = querySnapshot.docs.map(doc => ({ slug: doc.id, ...doc.data() } as Product));
    } catch (error) { /* Handle error */ }
    
    const categories = [...new Set(products.map(p => p.category || 'Uncategorized'))];
    const limitedExists = products.some(p => p.isLimited);
    
    let definitions = categories.map(category => ({
        name: category,
        slug: category.toLowerCase().replace(/\s+/g, '-'),
        filterQuery: query(collection(db, "products"), where("category", "==", category))
    }));

    if (limitedExists) {
        definitions.push({
             name: "Limited Editions", 
             slug: "limited-editions", 
             filterQuery: query(collection(db, "products"), where("isLimited", "==", true))
        });
    }
    // Add 'all' collection definition
    definitions.push({ name: "The Full Collection", slug: "all", filterQuery: query(collection(db, "products")) });
    
    return definitions;
}

export async function getStaticPaths() {
    const definitions = await getCollectionDefinitions();
    return definitions.map((collection) => ({
        params: { slug: collection.slug },
        props: { collection },
    }));
}

interface CollectionDefinition {
    name: string;
    slug: string;
    filterQuery: any; // Firestore Query type can be complex, use any for simplicity here
}
interface Props {
  collection: CollectionDefinition;
}

const { collection: collectionInfo } = Astro.props;
let collectionProducts: Product[] = [];
let fetchError: string | null = null;

try {
    // Fetch products based on the query defined for this collection slug
    const querySnapshot = await getDocs(collectionInfo.filterQuery);
    collectionProducts = querySnapshot.docs.map(doc => ({ slug: doc.id, ...doc.data() } as Product));
} catch (error) {
     console.error(`Error fetching products for collection ${collectionInfo.slug}:`, error);
     fetchError = `Could not load products for ${collectionInfo.name}.`;
}
---

<BaseLayout title={collectionInfo.name}>
    <div class="container mx-auto px-4 py-16 md:py-24">
        <h1 class="text-4xl md:text-5xl font-bold font-serif text-center text-cnc-highlight mb-12 tracking-tight">{collectionInfo.name}</h1>
        
        {fetchError ? (
             <p class="text-center text-red-500">{fetchError}</p>
        ) : collectionProducts.length > 0 ? (
            <ProductGrid products={collectionProducts} />
        ) : (
            <p class="text-center text-cnc-dim italic">No products currently in this collection.</p>
        )}
    </div>
</BaseLayout>

<script>
  // Add GSAP animations for product cards if needed
  // import gsap from "gsap"; etc...
</script> 