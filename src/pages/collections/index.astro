---
import BaseLayout from '@/layouts/BaseLayout.astro';
import ProductGrid from '@/components/ProductGrid.astro';
// Removed local data import
import { db } from '@/lib/firebase';
import { collection, getDocs, query } from 'firebase/firestore';
import type { Product } from '@/types';

// Fetch all products server-side to derive collections
let allProducts: Product[] = [];
let fetchError: string | null = null;
let collections: { name: string; slug: string; products: Product[] }[] = [];

try {
  const productsQuery = query(collection(db, "products"));
  const querySnapshot = await getDocs(productsQuery);
  allProducts = querySnapshot.docs.map(doc => ({ slug: doc.id, ...doc.data() } as Product));

  // --- Derive Collections from Products --- 
  const limitedProducts = allProducts.filter(p => p.isLimited);
  const categories = [...new Set(allProducts.map(p => p.category || 'Uncategorized'))];
   collections = [
      // Always add Limited Editions if any exist
      ...(limitedProducts.length > 0 ? [{ name: "Limited Editions", slug: "limited-editions", products: limitedProducts }] : []),
      
      // Add collections for each category found
      ...categories.map(category => ({
          name: category,
          slug: category.toLowerCase().replace(/\s+/g, '-'), // Generate slug from category name
          products: allProducts.filter(p => (p.category || 'Uncategorized') === category)
      })),
      
      // Optional: Add 'Full Collection' 
      // { name: "The Full Collection", slug: "all", products: allProducts }, 
  ];
  // Sort collections alphabetically by name, maybe push Limited Editions to top?
  collections.sort((a, b) => a.name.localeCompare(b.name));
  if (limitedProducts.length > 0) {
      const limitedIndex = collections.findIndex(c => c.slug === 'limited-editions');
      if (limitedIndex > -1) {
          const limitedCollection = collections.splice(limitedIndex, 1)[0];
          collections.unshift(limitedCollection); // Move Limited to the start
      }
  }
  console.log('Categories:', collections);

} catch (error) {
    console.error("Error fetching products for collections page:", error);
    fetchError = "Could not load collections. Please try again later.";
}

---
<BaseLayout title="Collections">
    <div class="container mx-auto px-4 py-16 md:py-24">
        <!-- <h1 class="text-4xl md:text-5xl font-bold font-serif text-center text-cnc-highlight mb-16 tracking-tight">Collections</h1> -->
        
        {fetchError ? (
             <p class="text-center text-red-500">{fetchError}</p>
        ) : collections.length > 0 ? (
            <div class="space-y-16 md:space-y-20">
                {collections.map(collection => (
                    <section class="collection-section"> {/* Target for GSAP */}
                        <h2 class="text-2xl md:text-3xl font-serif font-medium text-cnc-highlight mb-8 border-b border-cnc-medium/50 pb-3">
                            <a href={`/collections/${collection.slug}`} class="hover:opacity-80 transition-opacity">
                                {collection.name}
                            </a> 
                            <span class="text-sm font-mono text-cnc-dim ml-2">({collection.products.length})</span>
                        </h2>
                        {collection.products.length > 0 ? (
                            <ProductGrid products={collection.products.slice(0, 4)} /> /* Show first 4 */
                        ) : (
                            <p class="text-cnc-dim italic">No products currently in this collection.</p>
                        )}
                        {collection.products.length > 4 && (
                             <div class="text-center mt-10">
                                 <a href={`/collections/${collection.slug}`} class="inline-block text-sm font-mono uppercase tracking-widest text-cnc-highlight hover:opacity-80 transition-opacity group">
                                    View All {collection.name} <span class="inline-block transition-transform duration-200 group-hover:translate-x-1">&rarr;</span>
                                </a>
                             </div>
                        )}
                    </section>
                ))}
            </div>
         ) : (
             <p class="text-center text-cnc-dim italic">No collections found.</p>
         )}
    </div>
</BaseLayout>

<script>
  // Add GSAP scroll animation for each .collection-section
  import gsap from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  gsap.registerPlugin(ScrollTrigger);

  const sections = gsap.utils.toArray('.collection-section');
  sections.forEach((section) => {
      const element = section as Element; // Type assertion after getting the value
      if (!element) return; // Skip if not an element

      gsap.from(element, {
          opacity: 0,
          y: 50,
          duration: 0.8,
          ease: "power3.out",
          scrollTrigger: {
              trigger: element, // Use the typed element
              start: "top 85%",
              // toggleActions: "play none none none",
          }
      });
  });
</script> 