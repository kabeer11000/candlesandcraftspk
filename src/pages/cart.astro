---
import BaseLayout from '@/layouts/BaseLayout.astro';
// import CartLineItem from '@/components/CartLineItem.astro'; // Removed unused import

// No data fetching needed here, the component will handle it client-side
---
<BaseLayout title="Shopping Cart">
    <div class="max-w-4xl mx-auto py-16 md:py-24">
        <h1 class="text-3xl md:text-4xl font-bold font-serif text-center text-cnc-highlight mb-12 tracking-tight">Your Cart</h1>

        {/* Cart items will be rendered client-side */}
        <div id="cart-items-container" class="mb-12">
            {/* Loading State */}
            <p class="text-center text-cnc-dim italic" id="cart-loading-message">Loading cart...</p>
            {/* Error State */}
            <p class="text-center text-red-500 hidden" id="cart-error-message"></p>
            {/* Empty State */}
            <div class="text-center hidden" id="cart-empty-message">
                <p class="text-cnc-dim mb-6">Your cart is currently empty.</p>
                <a href="/shop" class="inline-block text-sm font-mono uppercase tracking-widest text-cnc-highlight hover:opacity-80 transition-opacity group">
                    Continue Shopping <span class="inline-block transition-transform duration-200 group-hover:translate-x-1">&rarr;</span>
                </a>
            </div>
        </div>

        {/* Cart Summary and Checkout Button */} 
        <div id="cart-summary" class="mt-12 pt-8 max-w-sm ml-auto text-right hidden">
            <div class="flex justify-between items-baseline mb-2">
                <span class="text-cnc-dim">Subtotal</span>
                <span class="text-xl font-medium text-cnc-light font-mono" id="cart-subtotal">$0.00</span>
            </div>
            <p class="text-xs text-cnc-dim/70 mb-6">Shipping calculated at checkout.</p>
            <a href="/checkout" 
               id="checkout-button" 
               class="checkout-btn inline-block w-full bg-cnc-highlight text-cnc-black font-medium py-3 px-10 hover:bg-opacity-80 focus:outline-none focus:ring-2 focus:ring-cnc-highlight focus:ring-offset-2 focus:ring-offset-cnc-black transition-all duration-200 ease-in-out text-sm uppercase tracking-wider text-center">
                Proceed to Checkout
            </a>
        </div>

    </div>
</BaseLayout>

<script>
    // This script handles rendering cart items client-side
    import { cartItems, cartTotal, isCartLoading, cartError, removeItemFromCart, updateItemQuantity } from '@/stores/cartStore';
    import { currentUser } from '@/lib/firebase';

    // DOM Elements
    const container = document.getElementById('cart-items-container');
    const summaryElement = document.getElementById('cart-summary');
    const subtotalElement = document.getElementById('cart-subtotal');
    const loadingMessage = document.getElementById('cart-loading-message');
    const errorMessage = document.getElementById('cart-error-message');
    const emptyMessage = document.getElementById('cart-empty-message');
    const checkoutButton = document.getElementById('checkout-button');

    // Function to format currency
    function formatCurrency(amount) {
        // Assuming PKR for now, adjust if needed
        return `PKR ${amount.toFixed(2)}`;
    }

    // Render function (handles loading, error, empty, and populated states)
    function renderCart( items, total, isLoading, error, user ) {
        if (!container || !summaryElement || !subtotalElement || !loadingMessage || !errorMessage || !emptyMessage || !checkoutButton) {
             console.error("Cart page elements not found!");
             return;
        }
        
        // Clear previous items & hide messages
        container.querySelectorAll('.cart-item').forEach(el => el.remove());
        loadingMessage.classList.add('hidden');
        errorMessage.classList.add('hidden');
        emptyMessage.classList.add('hidden');
        summaryElement.classList.add('hidden');
        checkoutButton.classList.add('opacity-50', 'pointer-events-none'); // Disable checkout btn initially

        // Handle states
        if (isLoading) {
            loadingMessage.classList.remove('hidden');
            return;
        }
        if (error) {
            errorMessage.textContent = error;
            errorMessage.classList.remove('hidden');
            return;
        }
        if (user === undefined || user === null) {
             emptyMessage.classList.remove('hidden');
             emptyMessage.querySelector('p').textContent = 'Please sign in to view your cart.';
             return;
        }

        const itemsArray = Object.values(items);
        if (itemsArray.length === 0) {
            emptyMessage.classList.remove('hidden');
             emptyMessage.querySelector('p').textContent = 'Your cart is currently empty.';
        } else {
            summaryElement.classList.remove('hidden');
             checkoutButton.classList.remove('opacity-50', 'pointer-events-none'); // Enable checkout btn
            subtotalElement.textContent = formatCurrency(total);

            itemsArray.forEach((item /* : CartItem */) => {
                const itemElement = document.createElement('div');
                console.log(item);
                itemElement.className = 'cart-item grid grid-cols-[auto_1fr_auto] gap-4 items-center border-b border-cnc-medium/50 py-6';
                
                // Calculate line total safely
                const unitPrice = Number(item?.price) || 0;
                const quantity = Number(item?.quantity) || 0;
                const lineTotal = unitPrice * quantity;

                itemElement.innerHTML = `
                    <a href="/products/${item.slug}" class="block w-20 h-24 bg-cnc-dark">
                        <img src="${item.image}" alt="${item.name}" class="w-full h-full object-cover" loading="lazy">
                    </a>
                    <div class="flex flex-col justify-between self-stretch py-1">
                        <div>
                            <a href="/products/${item.slug}" class="text-sm font-medium text-cnc-light hover:text-cnc-highlight transition-colors">${item.name}</a>
                            <p class="text-xs text-cnc-dim mt-1">${formatCurrency(unitPrice)} each</p>
                        </div>
                        <button data-remove-id="${item.id}" class="remove-item-btn text-left text-xs text-red-500 hover:text-red-400 transition-colors mt-2 self-start p-1 -ml-1">Remove</button>
                    </div>
                    <div class="text-right">
                        <p class="text-sm font-medium text-cnc-light font-mono mb-2">${formatCurrency(lineTotal)}</p>
                        <input type="number" value="${quantity}" min="1" data-update-id="${item.id}" class="quantity-input w-16 bg-cnc-medium/50 border border-cnc-medium/80 -rounded px-2 py-1 text-center text-sm text-cnc-light focus:ring-1 focus:ring-cnc-highlight focus:border-cnc-highlight" />
                    </div>
                `;
                container.appendChild(itemElement);
            });
            addEventListeners(); // Re-attach listeners after render
        }
    }

    // Attaches listeners to dynamically created elements
    function addEventListeners() {
        container.querySelectorAll(".remove-item-btn").forEach(button => {
            // Type guard for the button element
            if (!(button instanceof HTMLButtonElement)) return; 

            const btn = button; // Now known to be HTMLButtonElement
            const newBtn = btn.cloneNode(true) as HTMLButtonElement; // Assert cloned type
            btn.parentNode?.replaceChild(newBtn, btn);

            newBtn.addEventListener("click", async (e) => {
                // currentTarget is already the button we added listener to
                const target = e.currentTarget as HTMLButtonElement; 
                const productId = target.dataset.removeId;
                if (productId) {
                    target.disabled = true; // Safe to access .disabled
                    target.textContent = "Removing..."; // Safe to access .textContent
                    try { await removeItemFromCart(productId); } 
                    catch (err) {
                        console.error("Remove failed:", err);
                        alert('Failed to remove item.');
                        // No need to reset text/disabled here, re-render will fix
                    }
                }
            });
        });

        container.querySelectorAll(".quantity-input").forEach(input => {
            // Type guard for the input element
            if (!(input instanceof HTMLInputElement)) return;

            const inp = input; // Now known to be HTMLInputElement
            const newInp = inp.cloneNode(true) as HTMLInputElement; // Assert cloned type
            inp.parentNode?.replaceChild(newInp, inp);

            newInp.addEventListener("change", async (e) => {
                // currentTarget is already the input we added listener to
                const target = e.currentTarget as HTMLInputElement;
                const productId = target.dataset.updateId;
                const newQuantity = parseInt(target.value, 10); // Safe to access .value
                 if (productId && !isNaN(newQuantity)) {
                     target.disabled = true; // Safe to access .disabled
                     try { await updateItemQuantity(productId, newQuantity); }
                      catch (err) {
                          console.error("Update quantity failed:", err);
                          alert('Failed to update quantity.');
                          // Revert value immediately for better UX before re-render?
                          // target.value = cartItems.get()[productId]?.quantity.toString() || '1';
                     } finally {
                         target.disabled = false; // Re-enable input
                     }
                 }
            });
        });
    }

    // State variables to hold latest store values
    let latestItems = cartItems.get();
    let latestTotal = cartTotal.get();
    let latestLoading = isCartLoading.get();
    let latestError = cartError.get();
    let latestUser = currentUser.get();

    // Subscribe to all relevant stores
    const unsubCart = cartItems.subscribe(v => { latestItems = v; renderCart(latestItems, latestTotal, latestLoading, latestError, latestUser); });
    const unsubTotal = cartTotal.subscribe(v => { latestTotal = v; renderCart(latestItems, latestTotal, latestLoading, latestError, latestUser); });
    const unsubLoading = isCartLoading.subscribe(v => { latestLoading = v; renderCart(latestItems, latestTotal, latestLoading, latestError, latestUser); });
    const unsubError = cartError.subscribe(v => { latestError = v; renderCart(latestItems, latestTotal, latestLoading, latestError, latestUser); });
    const unsubUser = currentUser.subscribe(v => { latestUser = v; renderCart(latestItems, latestTotal, latestLoading, latestError, latestUser); });

    // Initial render on load
    renderCart(latestItems, latestTotal, latestLoading, latestError, latestUser);

    // Basic HMR cleanup
    // if (import.meta.hot) { /* ... */ }

</script> 