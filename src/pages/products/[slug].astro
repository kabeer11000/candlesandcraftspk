---
import BaseLayout from '@/layouts/BaseLayout.astro';
import { db } from '@/lib/firebase'; // Import client db instance
import { collection, getDocs, doc, getDoc } from 'firebase/firestore';
import type { Product } from '@/types'; // Corrected type import path

// Function to fetch a single product server-side
async function getProduct(slug: string | undefined): Promise<Product | null> {
    if (!slug) return null; 
    try {
        const productRef = doc(db, "products", slug);
        const productSnap = await getDoc(productRef);
        if (productSnap.exists()) {
            return { slug: productSnap.id, ...(productSnap.data() as Product) };
        } else {
            return null;
        }
    } catch (error) {
        console.error("Error fetching product:", slug, error);
        return null;
    }
}

// Fetch product directly using the slug from params
const product = await getProduct(Astro.params.slug);

// Handle product not found - return 404
if (!product) {
    return new Response(null, { status: 404, statusText: "Not Found" });
}
---

<BaseLayout title={product.name}>
  <div class="grid grid-cols-1 md:grid-cols-2 gap-12 md:gap-20 items-start container mx-auto px-4 py-20 md:py-32">
    <!-- Image Gallery Section -->
    <div class="w-full space-y-6 md:sticky top-28">
      {product.imageGallery.map((imgSrc, index) => (
        <div class="aspect-[4/3] bg-naksh-medium/30 scroll-fade-in">
          <img 
            src={imgSrc} 
            alt={`${product.name} - Image ${index + 1}`}
            class="w-full h-full object-cover" 
            loading={index === 0 ? "eager" : "lazy"}
            transition:name={index === 0 ? `product-image-${product.slug}` : undefined}
          />
        </div>
      ))}
    </div>

    <!-- Product Info Section -->
    <div class="pt-4 md:pt-0">
      <h1 class="text-3xl lg:text-4xl font-serif font-bold text-naksh-light mb-3 leading-tight tracking-tight">{product.name}</h1>
      
      {/* Limited Edition Badge */} 
      {product.isLimited && (
        <span class="inline-block bg-naksh-accent/20 text-naksh-accent text-xs font-mono uppercase px-2 py-0.5 rounded mb-4 tracking-widest">Limited Edition</span>
      )}

      <p class="text-2xl text-naksh-light mb-6 font-mono tracking-wide">PKR {product.price.toFixed(2)}</p>
      
      {/* Short Description */} 
      <div class="prose prose-invert prose-sm text-naksh-dim max-w-none mb-10">
        <p>{product.description}</p>
      </div>

      {/* Add to Cart Form */} 
      <form class="mt-10 mb-16">
        <button 
          type="button" 
          id="add-to-cart-button"
          data-product-id={product.slug}
          data-product-slug={product.slug}
          class="w-full bg-naksh-highlight text-naksh-black font-medium py-3.5 px-8 hover:bg-opacity-80 focus:outline-none focus:ring-2 focus:ring-naksh-highlight focus:ring-offset-2 focus:ring-offset-naksh-black transition-all duration-200 ease-in-out text-sm uppercase tracking-wider disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Add to Cart
        </button>
      </form>

      {/* Detailed Info Sections */} 
      <div class="space-y-10 border-t border-naksh-medium/50 pt-10">
        {product.details.inspiration && (
          <div class="scroll-fade-in">
            <h3 class="text-sm font-medium uppercase tracking-widest text-naksh-dim mb-2">Inspiration</h3>
            <p class="text-sm text-naksh-light leading-relaxed">{product.details.inspiration}</p>
          </div>
        )}
        {product.details.materials && (
           <div class="scroll-fade-in">
             <h3 class="text-sm font-medium uppercase tracking-widest text-naksh-dim mb-2">Materials & Construction</h3>
             <p class="text-sm text-naksh-light leading-relaxed">{product.details.materials}</p>
          </div>
        )}
         {product.details.features && (
           <div class="scroll-fade-in">
             <h3 class="text-sm font-medium uppercase tracking-widest text-naksh-dim mb-2">Features</h3>
             <p class="text-sm text-naksh-light leading-relaxed">{product.details.features}</p>
          </div>
        )}
        {product.details.dimensions && (
          <div class="scroll-fade-in">
            <h3 class="text-sm font-medium uppercase tracking-widest text-naksh-dim mb-2">Specifications</h3>
            <p class="text-sm text-naksh-light font-mono tracking-wide">{product.details.dimensions}</p>
          </div>
        )}
        {/* Add other details sections if needed (e.g., history) */} 
      </div>

    </div>
  </div>
</BaseLayout>

<script>
import { addItemToCart, isCartLoading } from '@/stores/cartStore'; // Relative path
import { currentUser } from '@/lib/firebase'; // Relative path

document.addEventListener('DOMContentLoaded', () => {
  const button = document.getElementById('add-to-cart-button');
  let isAuthReady = false;
  let cartLoading = true;

  function updateButtonState() {
    if (button instanceof HTMLButtonElement) {
      if (!isAuthReady || cartLoading) {
        button.disabled = true;
        button.textContent = 'Loading...';
        button.classList.add('opacity-50', 'cursor-not-allowed');
      } else {
        if (button.textContent !== 'Added!') {
          button.disabled = false;
          button.textContent = 'Add to Cart';
          button.classList.remove('opacity-50', 'cursor-not-allowed');
        }
      }
    } else {
    }
  }

  const unsubUser = currentUser.subscribe((user) => {
    /** @type {import("firebase/auth").User | null} */
    const typedUser = user; 
    isAuthReady = typedUser !== null && typedUser !== undefined;
    updateButtonState();
  });
  const unsubLoading = isCartLoading.subscribe((loading) => {
    cartLoading = loading;
    updateButtonState();
  });

  updateButtonState();
  
  if (button instanceof HTMLButtonElement) {
    button.addEventListener('click', async () => {
      if (button.disabled) {
        return;
      }

      const productId = button.dataset.productSlug;
      
      if (productId) {
        const originalText = button.textContent;
        button.disabled = true;
        button.textContent = 'Adding...';
        
        try {
          await addItemToCart(productId);
          
          button.textContent = 'Added!';
          setTimeout(() => { 
              if (button.textContent === 'Added!') {
                   button.textContent = originalText;
              }
              updateButtonState(); 
          }, 1500);

        } catch (error) {
          const errorMessage =
            error instanceof Error
              ? error.message
              : 'Error adding item to cart. Please try again.';
          alert(errorMessage);
          button.textContent = originalText;
          updateButtonState(); 
        }

      } else {
        alert('Could not add item to cart due to missing product ID.'); 
      }
    });
  }

  // --- Optional: Desktop Gallery Click Handler (Plain JS) ---
  const mainImage = document.querySelector('.product-gallery .hidden.lg\:grid img');
  const thumbnails = document.querySelectorAll('.product-gallery .hidden.lg\:grid .grid img');
  
  if (mainImage instanceof HTMLImageElement && thumbnails.length > 0) {
      thumbnails.forEach(thumb => {
          if (thumb instanceof HTMLImageElement) {
              thumb.addEventListener('click', () => {
                  mainImage.src = thumb.src;
              });
          }
      });
  }
}); // End of DOMContentLoaded listener
</script> 