---
import BaseLayout from '@/layouts/BaseLayout.astro';
import ProductGrid from '@/components/ProductGrid.astro';
import { db } from '@/lib/firebase';
import { collection, getDocs, query, where } from 'firebase/firestore';
import type { Product } from '@/types';

// Get current category from URL query param
const currentCategory = Astro.url.searchParams.get('category');

// Fetch products server-side, filtering by category if present
let products: Product[] = [];
let categories: string[] = [];
let fetchError: string | null = null;

try {
  // Base query
  let productsQuery = query(collection(db, "products"));

  // Add filter if a category is specified in the URL
  if (currentCategory) {
    productsQuery = query(collection(db, "products"), where("category", "==", currentCategory));
  }
  
  // Fetch filtered (or all) products
  const querySnapshot = await getDocs(productsQuery);
  products = querySnapshot.docs.map(doc => ({ slug: doc.id, ...doc.data() } as Product));

  // Fetch ALL categories for the filter links (needs a separate query)
  const allProductsSnapshot = await getDocs(collection(db, "products"));
  categories = [...new Set(allProductsSnapshot.docs.map(doc => (doc.data().category || 'Uncategorized') as string))].sort(); 
  
} catch (error) {
    console.error("Error fetching products/categories for shop page:", error);
    fetchError = "Could not load products. Please try again later.";
}

// Prepare simplified data for client-side filtering script
const clientProductData = products.map(p => ({
    id: p.id || p.slug, // Use slug if id is missing
    name: p.name,
    slug: p.slug,
    price: p.price,
    description: p.description,
    category: p.category || 'Uncategorized',
    imageUrl: p.imageUrl,
    isLimited: p.isLimited,
    // imageGallery: p.imageGallery,
}));
---
<BaseLayout title="Shop All">
  <div class="text-center pt-16 md:pt-20 lg:pt-24 pb-8 md:pb-12">
    {/* <h1 class="text-4xl md:text-5xl font-bold font-serif text-naksh-highlight mb-8 md:mb-12 tracking-tight">Naksh Products</h1> */}
    {/* Category Filters - Now using links */}
    { !fetchError && categories.length > 0 && (
      <div class="inline-block mx-auto category-filters">
        <div class="flex justify-center flex-wrap gap-x-3 gap-y-3 md:gap-x-4">
          {/* "All" Link - Adjust padding for tap targets */}
          <a 
            href="/shop" 
            class:list={[
              "category-link px-5 py-2 rounded-full text-sm font-medium transition-colors",
              !currentCategory ? 'bg-naksh-highlight text-naksh-black' : 'border border-naksh-medium text-naksh-dim hover:border-naksh-light hover:text-naksh-light'
            ]}
          >
            All
          </a>
          {/* Category Links - Adjust padding for tap targets */}
          {categories.map(category => (
            <a 
              href={`/shop?category=${encodeURIComponent(category)}`} 
              class:list={[
                "category-link px-5 py-2 rounded-full text-sm font-medium transition-colors",
                currentCategory === category ? 'bg-naksh-highlight text-naksh-black' : 'border border-naksh-medium text-naksh-dim hover:border-naksh-light hover:text-naksh-light'
              ]}
            >
              {category}
            </a>
          ))}
        </div>
      </div>
    )}
  </div>

  {/* Product Grid Section */}
  <div class="pb-20 md:pb-28 lg:pb-32"> 
    {fetchError ? (
      <p class="text-center text-red-500 py-10">{fetchError}</p>
    ) : products.length > 0 ? (
      // Assume ProductGrid handles its internal spacing & responsive columns
      <ProductGrid products={products} /> 
    ) : (
       <p class="text-naksh-dim italic text-center py-10">No products found matching this criteria.</p>
    )}
  </div>
</BaseLayout>

{/* Keep minimal style block if needed, or move styles */}
<style>
/* Styles for non-active link hover (can be simplified) */
.category-link.border:hover {
   /* Tailwind classes handle this */
}
</style> 