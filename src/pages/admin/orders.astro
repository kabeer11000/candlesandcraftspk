---
import AdminLayout from '@/layouts/AdminLayout.astro';
import { db } from '@/lib/firebase';
import { collection, getDocs, query, orderBy, Timestamp } from 'firebase/firestore';
import type { Order } from '@/types'; // Assuming an Order type exists

// Function to format Firestore Timestamp
function formatTimestamp(timestamp: Timestamp | undefined): string {
    if (!timestamp) return 'N/A';
    return timestamp.toDate().toLocaleString('en-US', { 
        year: 'numeric', month: 'short', day: 'numeric', 
        hour: 'numeric', minute: '2-digit', hour12: true 
    });
}

// Function to format currency
function formatCurrency(amount: number | undefined): string {
    if (typeof amount !== 'number') return 'PKR 0.00'; // Handle undefined/null
    return `PKR ${amount.toFixed(2)}`;
}

let orders: (Order & { id: string })[] = [];
let fetchError: string | null = null;

try {
    const ordersQuery = query(collection(db, "orders"), orderBy("createdAt", "desc"));
    const querySnapshot = await getDocs(ordersQuery);
    orders = querySnapshot.docs.map(doc => ({
        id: doc.id, 
        ...(doc.data() as Order) 
    }));
} catch (error) {
    console.error("Error fetching orders for admin panel:", error);
    fetchError = "Could not load orders.";
}
---
<AdminLayout title="Orders">
    {fetchError && (
        <p class="text-center text-red-500 bg-red-900/20 border border-red-700 p-4 -rounded">{fetchError}</p>
    )}

    {!fetchError && (
        <div class="overflow-x-auto bg-naksh-dark border border-naksh-medium/50 -rounded shadow">
            <table class="min-w-full divide-y divide-naksh-medium/50">
                <thead class="bg-naksh-medium/30">
                    <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-naksh-dim uppercase tracking-wider">Order ID</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-naksh-dim uppercase tracking-wider">Date</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-naksh-dim uppercase tracking-wider">Customer</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-naksh-dim uppercase tracking-wider">Total</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-naksh-dim uppercase tracking-wider">Status</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-naksh-dim uppercase tracking-wider">Items</th>
                        {/* Add Actions column if needed */}
                    </tr>
                </thead>
                <tbody class="divide-y divide-naksh-medium/50">
                    {orders.length === 0 && (
                        <tr>
                            <td colspan="6" class="px-6 py-10 text-center text-naksh-dim italic">No orders found.</td>
                        </tr>
                    )}
                    {orders.map((order) => (
                        <tr class="hover:bg-naksh-medium/10 transition-colors">
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-mono text-naksh-light/70">
                                <a href={`/admin/orders/${order.id}`} class="hover:text-naksh-highlight underline underline-offset-2" title={order.id}>
                                    {order.id.substring(0, 8)}...
                                </a>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-naksh-dim">{formatTimestamp(order.createdAt)}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-naksh-light">{order.shipping?.name || order.userId?.substring(0,8)+'...' || 'N/A'}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-mono text-naksh-light">{formatCurrency(order.total)}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm">
                                {/* Basic status display - could add color coding */} 
                                <span class:list={[
                                    "px-2 py-0.5 inline-flex text-xs leading-5 font-semibold rounded-full",
                                    order.status === 'Pending' ? 'bg-yellow-900/50 text-yellow-300' : 
                                    order.status === 'Shipped' ? 'bg-blue-900/50 text-blue-300' :
                                    order.status === 'Delivered' ? 'bg-green-900/50 text-green-300' :
                                    order.status === 'Cancelled' ? 'bg-red-900/50 text-red-300' : 'bg-gray-700 text-gray-300'
                                ]}>
                                    {order.status || 'Unknown'}
                                </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-naksh-dim">
                                {Object.values(order.items || {}).reduce((count, item: any) => count + (item?.quantity || 0), 0)} items
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    )}
</AdminLayout> 