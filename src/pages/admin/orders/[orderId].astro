---
import AdminLayout from '@/layouts/AdminLayout.astro';
import { db } from '@/lib/firebase';
import { doc, getDoc, updateDoc, Timestamp } from 'firebase/firestore';
import type { Order, OrderItem } from '@/types';

const orderId: string | undefined = Astro.params.orderId;
let order: (Order & { id: string }) | null = null;
let fetchError: string | null = null;

const ORDER_STATUSES = ["Pending", "Shipped", "Delivered", "Cancelled"];

// Helper functions (copied from orders list page for now)
function formatTimestamp(timestamp: Timestamp | undefined): string {
    if (!timestamp) return 'N/A';
    return timestamp.toDate().toLocaleString('en-US', { 
        year: 'numeric', month: 'short', day: 'numeric', 
        hour: 'numeric', minute: '2-digit', hour12: true 
    });
}
function formatCurrency(amount: number | undefined): string {
    if (typeof amount !== 'number') return 'PKR ---.--'; 
    return `PKR ${amount.toFixed(2)}`;
}

if (orderId) {
    try {
        const orderRef = doc(db, "orders", orderId);
        const orderSnap = await getDoc(orderRef);
        if (orderSnap.exists()) {
            order = { id: orderSnap.id, ...(orderSnap.data() as Order) };
        } else {
            fetchError = "Order not found.";
        }
    } catch (error) {
        console.error(`Error fetching order ${orderId}:`, error);
        fetchError = "Could not load order details.";
    }
} else {
    fetchError = "Order ID is missing.";
}
---
<AdminLayout title={`Order Details ${orderId ? '- ' + orderId.substring(0, 8) + '...' : ''}`}>
    {fetchError && (
        <p class="text-center text-red-500 bg-red-900/20 border border-red-700 p-4 -rounded mb-6">{fetchError}</p>
    )}
    {!order && !fetchError && (
         <p class="text-center text-cnc-dim italic">Loading order details...</p>
    )}

    {order && (
        <div class="grid grid-cols-1 md:grid-cols-3 gap-8" data-order-id={orderId}>
            {/* Order Items & Summary (Col 1 & 2) */}
            <div class="md:col-span-2 bg-cnc-dark border border-cnc-medium/50 -rounded p-6">
                <h2 class="text-xl font-semibold text-cnc-highlight mb-4 border-b border-cnc-medium/50 pb-3">Order Items</h2>
                <div class="space-y-4 mb-6">
                    {Object.values(order.items || {}).map((item: OrderItem) => (
                         <div class="flex items-center gap-4 text-sm">
                            <img src={item.image} alt={item.name} class="w-16 h-16 object-cover bg-cnc-medium/30 -rounded flex-shrink-0" />
                            <div class="flex-grow">
                                <p class="font-medium text-cnc-light">{item.name}</p>
                                <p class="text-xs text-cnc-dim">Qty: {item.quantity}</p>
                            </div>
                            <div class="text-right font-mono">
                                <p class="text-cnc-light">{formatCurrency(item.price * item.quantity)}</p>
                                <p class="text-xs text-cnc-dim">({formatCurrency(item.price)} each)</p>
                            </div>
                        </div>
                    ))}
                </div>
                
                <div class="border-t border-cnc-medium/50 pt-4 space-y-2 text-sm">
                     <div class="flex justify-between">
                         <span class="text-cnc-dim">Subtotal</span>
                         <span class="font-medium text-cnc-light font-mono">{formatCurrency(order.subtotal)}</span>
                     </div>
                      <div class="flex justify-between">
                         <span class="text-cnc-dim">Shipping</span>
                         <span class="font-medium text-cnc-light font-mono">{formatCurrency(order.shippingCost)}</span>
                     </div>
                      <div class="flex justify-between text-base font-medium text-cnc-light mt-2 pt-2 border-t border-cnc-medium/50">
                         <span>Total</span>
                         <span class="font-mono">{formatCurrency(order.total)}</span>
                     </div>
                     <p class="text-xs text-cnc-dim text-right">Payment: {order.paymentMethod}</p>
                 </div>
            </div>

            {/* Customer & Status (Col 3) */}
            <div class="space-y-6">
                <div class="bg-cnc-dark border border-cnc-medium/50 -rounded p-6">
                     <h2 class="text-xl font-semibold text-cnc-highlight mb-4 border-b border-cnc-medium/50 pb-3">Customer & Shipping</h2>
                     <div class="space-y-1 text-sm">
                        <p class="text-cnc-light font-medium">{order.shipping?.name}</p>
                        <p class="text-cnc-dim">{order.shipping?.address}</p>
                        <p class="text-cnc-dim">{order.shipping?.city}, {order.shipping?.postalCode}</p>
                        <p class="text-cnc-dim">{order.shipping?.country}</p>
                        <p class="text-cnc-dim">Phone: {order.shipping?.phone}</p>
                        <p class="text-xs text-cnc-dim/70 pt-2">User ID: {order.userId}</p>
                     </div>
                 </div>

                 <div class="bg-cnc-dark border border-cnc-medium/50 -rounded p-6">
                     <h2 class="text-xl font-semibold text-cnc-highlight mb-4 border-b border-cnc-medium/50 pb-3">Order Status</h2>
                     <p class="text-sm text-cnc-dim mb-1">Placed on: {formatTimestamp(order.createdAt)}</p>
                     <div class="mt-4">
                         <label for="order-status" class="block text-sm font-medium text-cnc-dim mb-1">Update Status:</label>
                         <select 
                            id="order-status" 
                            name="status" 
                            class="w-full px-3 py-2 bg-cnc-medium border border-cnc-medium/80 -rounded shadow-sm focus:outline-none focus:ring-1 focus:ring-cnc-highlight focus:border-cnc-highlight text-cnc-light transition-colors"
                         >
                           {ORDER_STATUSES.map(status => (
                             <option value={status} selected={status === order.status}>{status}</option>
                           ))}
                         </select>
                         <button id="update-status-btn" class="mt-4 w-full bg-cnc-highlight text-cnc-black font-medium py-2 px-4 text-sm -rounded hover:bg-opacity-85 transition-opacity disabled:opacity-50 disabled:cursor-not-allowed">
                            Save Status
                        </button>
                        <p id="status-update-message" class="text-xs mt-2 text-center"></p>
                     </div>
                 </div>
            </div>
        </div>
    )}
</AdminLayout>

<script>
    import { db } from '@/lib/firebase';
    import { doc, updateDoc } from 'firebase/firestore';

    const statusSelect = document.getElementById('order-status');
    const updateButton = document.getElementById('update-status-btn');
    const messageElement = document.getElementById('status-update-message');
    
    // Find the element where we put the data attribute
    const orderWrapper = document.querySelector<HTMLElement>('[data-order-id]');
    const currentOrderId = orderWrapper?.dataset.orderId;
    
    // @ts-ignore - Get initial status from server-rendered select
    const initialStatus = (statusSelect instanceof HTMLSelectElement) ? statusSelect.value : null;

    if (statusSelect instanceof HTMLSelectElement && updateButton instanceof HTMLButtonElement && messageElement && currentOrderId) {
        updateButton.addEventListener('click', async () => {
            const newStatus = statusSelect.value;
            if (newStatus === initialStatus) {
                 messageElement.textContent = 'Status is already set to this value.';
                 messageElement.className = 'text-xs mt-2 text-center text-cnc-dim';
                 return;
            }

            updateButton.disabled = true;
            updateButton.textContent = 'Saving...';
            messageElement.textContent = '';
            messageElement.className = 'text-xs mt-2 text-center'; // Reset class

            try {
                const orderRef = doc(db, 'orders', currentOrderId);
                await updateDoc(orderRef, { status: newStatus });
                
                messageElement.textContent = 'Status updated successfully!';
                messageElement.classList.add('text-green-500');
                // initialStatus = newStatus; // Update initial status after successful save
                
            } catch (error) {
                console.error("Error updating order status:", error);
                messageElement.textContent = 'Error updating status. Please try again.';
                messageElement.classList.add('text-red-500');
            } finally {
                updateButton.disabled = false;
                updateButton.textContent = 'Save Status';
            }
        });
    }
</script> 