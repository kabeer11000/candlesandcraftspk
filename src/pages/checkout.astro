---
import BaseLayout from '@/layouts/BaseLayout.astro';
// We'll fetch cart summary client-side
---
<BaseLayout title="Checkout">
    <div class="container mx-auto px-4 py-16 md:py-24">
        <h1 class="text-3xl md:text-4xl font-bold font-serif text-center text-naksh-light mb-12 tracking-tight">Checkout</h1>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-12 md:gap-16">
            {/* Shipping Details Form */}
            <div id="checkout-form-section">
                <h2 class="text-xl font-semibold text-naksh-light mb-6">Shipping Information</h2>
                <form id="checkout-form" class="space-y-4">
                    <div>
                        <label for="name" class="block text-sm font-medium text-naksh-dim mb-1">Full Name</label>
                        <input type="text" id="name" name="name" required class="checkout-input" placeholder="Your Name" autocomplete="name">
                    </div>
                    <div>
                        <label for="address" class="block text-sm font-medium text-naksh-dim mb-1">Address</label>
                        <input type="text" id="address" name="address" required class="checkout-input" placeholder="Street Address" autocomplete="street-address">
                    </div>
                     <div>
                        <label for="city" class="block text-sm font-medium text-naksh-dim mb-1">City</label>
                        <input type="text" id="city" name="city" required class="checkout-input" placeholder="City" autocomplete="address-level2">
                    </div>
                     <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label for="postal_code" class="block text-sm font-medium text-naksh-dim mb-1">Postal Code</label>
                            <input type="text" id="postal_code" name="postal_code" required class="checkout-input" placeholder="Postal Code" autocomplete="postal-code">
                        </div>
                        <div>
                            <label for="country" class="block text-sm font-medium text-naksh-dim mb-1">Country</label>
                            <input type="text" id="country" name="country" required value="India" class="checkout-input bg-naksh-medium/30" autocomplete="country-name" readonly>
                             {/* Assuming only shipping to India for now */}
                        </div>
                    </div>
                    <div>
                        <label for="phone" class="block text-sm font-medium text-naksh-dim mb-1">Phone</label>
                        <input type="tel" id="phone" name="phone" required class="checkout-input" placeholder="Phone Number" autocomplete="tel">
                    </div>
                    <div class="pt-6 border-t border-naksh-medium/50">
                         <h3 class="text-lg font-semibold text-naksh-light mb-3">Payment Method</h3>
                         <div class="bg-naksh-medium/30 border border-naksh-medium/50 p-4 rounded">
                             <p class="font-medium text-naksh-light">Cash on Delivery</p>
                             <p class="text-xs text-naksh-dim">Pay upon receiving your order.</p>
                         </div>
                    </div>
                    <div class="mt-8">
                        <button type="submit" id="place-order-button" class="w-full bg-naksh-highlight text-naksh-black font-medium py-3.5 px-8 hover:bg-opacity-80 focus:outline-none focus:ring-2 focus:ring-naksh-highlight focus:ring-offset-2 focus:ring-offset-naksh-black transition-all duration-200 ease-in-out text-sm uppercase tracking-wider disabled:opacity-50 disabled:cursor-not-allowed">
                            Place Order
                        </button>
                    </div>
                </form>
            </div>

            {/* Order Summary */} 
            <div id="order-summary-section" class="bg-naksh-dark border border-naksh-medium/50 rounded p-6 self-start md:sticky top-24">
                 <h2 class="text-xl font-semibold text-naksh-light mb-6 border-b border-naksh-medium/50 pb-4">Order Summary</h2>
                 {/* Items will be loaded client-side */}
                 <div id="summary-items-container" class="space-y-4 mb-6 max-h-64 overflow-y-auto pr-2">
                    <p id="summary-loading" class="text-naksh-dim italic text-sm">Loading summary...</p>
                 </div>
                 <div class="border-t border-naksh-medium/50 pt-4 space-y-2 text-sm">
                     <div class="flex justify-between">
                         <span class="text-naksh-dim">Subtotal</span>
                         <span class="font-medium text-naksh-light font-mono" id="summary-subtotal">$0.00</span>
                     </div>
                      <div class="flex justify-between">
                         <span class="text-naksh-dim">Shipping</span>
                         <span class="font-medium text-naksh-light">Calculated later</span>
                     </div>
                 </div>
                 <div class="border-t border-naksh-medium/50 pt-4 mt-4">
                     <div class="flex justify-between items-baseline">
                         <span class="text-base font-medium text-naksh-light">Total</span>
                         <span class="text-xl font-bold text-naksh-light font-mono" id="summary-total">$0.00</span>
                     </div>
                 </div>
            </div>
        </div>
    </div>
</BaseLayout>

<style>
/* Input styling for black theme */
.checkout-input {
    @apply block w-full px-3 py-2 bg-naksh-dark border border-naksh-medium rounded shadow-sm placeholder-naksh-dim/70 focus:outline-none focus:ring-1 focus:ring-naksh-highlight focus:border-naksh-highlight sm:text-sm text-naksh-light transition-colors;
}
.checkout-input:read-only {
    @apply bg-naksh-medium/50 cursor-not-allowed;
}
</style>

<script>
    import { cartItems, cartTotal, isCartLoading, clearCart } from '@/stores/cartStore';
    import { currentUser, db } from '@/lib/firebase';
    import { collection, addDoc, serverTimestamp } from 'firebase/firestore';

    const summaryContainer = document.getElementById('summary-items-container');
    const subtotalEl = document.getElementById('summary-subtotal');
    const totalEl = document.getElementById('summary-total');
    const summaryLoading = document.getElementById('summary-loading');
    const form = document.getElementById('checkout-form');
    const placeOrderBtn = document.getElementById('place-order-button');

    let currentItems = {};
    let currentTotal = 0;
    let user = null;

    function renderSummary(items, total) {
        if (!summaryContainer || !subtotalEl || !totalEl || !summaryLoading) return;

        summaryLoading?.classList.add('hidden');
        summaryContainer.innerHTML = ''; // Clear previous items

        const itemsArray = Object.values(items);
        if (itemsArray.length === 0) {
            summaryContainer.innerHTML = '<p class="text-naksh-dim italic text-sm">Your cart is empty.</p>';
            if (placeOrderBtn instanceof HTMLButtonElement) {
                placeOrderBtn.disabled = true;
            }
        } else {
            if (placeOrderBtn instanceof HTMLButtonElement) {
                placeOrderBtn.disabled = false;
            }
            itemsArray.forEach(item => {
                const itemEl = document.createElement('div');
                itemEl.className = 'flex justify-between items-center text-sm';
                itemEl.innerHTML = `
                    <div class="flex items-center space-x-3">
                        <img src="${item.image}" alt="${item.name}" class="w-10 h-12 object-cover bg-naksh-medium/30">
                        <div>
                            <p class="text-naksh-light font-medium">${item.name}</p>
                            <p class="text-naksh-dim text-xs">Qty: ${item.quantity}</p>
                        </div>
                    </div>
                    <span class="text-naksh-light font-mono text-xs">$${(item.price * item.quantity).toFixed(2)}</span>
                `;
                summaryContainer.appendChild(itemEl);
            });
        }
        subtotalEl.textContent = `$${total.toFixed(2)}`;
        totalEl.textContent = `$${total.toFixed(2)}`; // Update total (shipping not included yet)
    }

    const unsubCart = cartItems.subscribe(v => { currentItems = v; renderSummary(currentItems, currentTotal); });
    const unsubTotal = cartTotal.subscribe(v => { currentTotal = v; renderSummary(currentItems, currentTotal); });
    const unsubUser = currentUser.subscribe(v => { user = v; });
    // TODO: Add loading/error state handling for summary

    // Form Submission Logic
    if (form instanceof HTMLFormElement) {
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            if (!user || Object.keys(currentItems).length === 0 || !(placeOrderBtn instanceof HTMLButtonElement)) {
                alert('Cannot place order. Ensure you are signed in and your cart is not empty.');
                return;
            }

            placeOrderBtn.disabled = true;
            placeOrderBtn.textContent = 'Placing Order...';

            const formData = new FormData(form);
            const shippingDetails = {
                name: formData.get('name'),
                address: formData.get('address'),
                city: formData.get('city'),
                postalCode: formData.get('postal_code'),
                country: formData.get('country'),
                phone: formData.get('phone'),
            };

            try {
                // Create order document in Firestore
                const orderData = {
                    userId: user.uid,
                    items: currentItems, // Store cart items directly
                    total: currentTotal,
                    shipping: shippingDetails,
                    status: 'Pending', // Initial status
                    paymentMethod: 'Cash on Delivery',
                    createdAt: serverTimestamp(),
                };
                const docRef = await addDoc(collection(db, 'orders'), orderData);
                console.log("Order placed with ID: ", docRef.id);

                // Clear the cart after successful order placement
                await clearCart();
                
                // Redirect to confirmation page (pass order ID)
                window.location.href = `/order-confirmation?orderId=${docRef.id}`;

            } catch (error) {
                console.error("Error placing order:", error);
                alert('There was an error placing your order. Please try again.');
                placeOrderBtn.disabled = false;
                placeOrderBtn.textContent = 'Place Order';
            }
        });
    }

    // Cleanup
    // if (import.meta.hot) { ... }

</script> 